
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.19.1
 * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
 */
Prisma.prismaVersion = {
  client: "5.19.1",
  engine: "69d742ee20b815d88e17e54db4a2a7a3b30324e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Agenda_produtoScalarFieldEnum = {
  id: 'id',
  agenda_id: 'agenda_id',
  produto_id: 'produto_id',
  unidade_id: 'unidade_id'
};

exports.Prisma.AgendasScalarFieldEnum = {
  id: 'id',
  data_hora: 'data_hora',
  data_hora_fim: 'data_hora_fim',
  tipo: 'tipo',
  medico_id: 'medico_id',
  produto_id: 'produto_id',
  especialidade_id: 'especialidade_id',
  agenda_aplicativo: 'agenda_aplicativo',
  unidade_id: 'unidade_id',
  inativo: 'inativo',
  agenda_id_old: 'agenda_id_old',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at'
};

exports.Prisma.Agendas_pacientesScalarFieldEnum = {
  id: 'id',
  agenda_id: 'agenda_id',
  paciente_id: 'paciente_id',
  convenio_id: 'convenio_id',
  plano_id: 'plano_id',
  retorno: 'retorno',
  produto_id: 'produto_id',
  agendamento_app: 'agendamento_app',
  unidade_id: 'unidade_id',
  inativo: 'inativo',
  appteleconsulta: 'appteleconsulta',
  teleconsulta: 'teleconsulta',
  agenda_paciente_id_old: 'agenda_paciente_id_old',
  code: 'code',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at'
};

exports.Prisma.Anexo_formularioScalarFieldEnum = {
  id: 'id',
  formulario_preenchido_id: 'formulario_preenchido_id',
  path: 'path',
  data_hora: 'data_hora',
  unidade_id: 'unidade_id',
  anexo_formulario_id_old: 'anexo_formulario_id_old',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at'
};

exports.Prisma.AtendcontinuadoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  paciente_id: 'paciente_id',
  atendimento_id: 'atendimento_id',
  agenda_paciente_id: 'agenda_paciente_id',
  produto_id: 'produto_id'
};

exports.Prisma.Atendcontinuado_atendimento_produtoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  atendimento_produto_id: 'atendimento_produto_id',
  atendcontinuado_id: 'atendcontinuado_id'
};

exports.Prisma.Atendimento_produtoScalarFieldEnum = {
  id: 'id',
  produto_id: 'produto_id',
  atendimento_id: 'atendimento_id',
  quantidade: 'quantidade',
  preco: 'preco',
  desconto: 'desconto',
  justificativa: 'justificativa',
  convenio_id: 'convenio_id',
  status_caixa: 'status_caixa',
  unidade_id: 'unidade_id',
  cortesia: 'cortesia',
  senha: 'senha',
  data_validade_senha: 'data_validade_senha',
  guia_operadora: 'guia_operadora',
  tecnica_utilizada: 'tecnica_utilizada',
  via_acesso: 'via_acesso',
  porcentagem: 'porcentagem',
  integrated_datafin: 'integrated_datafin',
  valor_processado: 'valor_processado',
  valor_liberado: 'valor_liberado',
  valor_glosa: 'valor_glosa',
  codigo_glosa: 'codigo_glosa',
  accredited_doctor_id: 'accredited_doctor_id',
  billed_at: 'billed_at',
  expires_at: 'expires_at',
  paid_at: 'paid_at'
};

exports.Prisma.Assignment_product_historyScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  clinic_id: 'clinic_id',
  assignment_id: 'assignment_id',
  assignment_product_id: 'assignment_product_id',
  product_id: 'product_id',
  quantity: 'quantity',
  price: 'price',
  discount: 'discount',
  observation: 'observation',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.AtendimentosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  data_hora: 'data_hora',
  codigo: 'codigo',
  tipo_consulta: 'tipo_consulta',
  tipo_saida: 'tipo_saida',
  guia: 'guia',
  paciente_id: 'paciente_id',
  agenda_paciente_id: 'agenda_paciente_id',
  data_emissao: 'data_emissao',
  tipo_paciente: 'tipo_paciente',
  duracao: 'duracao',
  data_final: 'data_final',
  tipo_guia: 'tipo_guia',
  inativo: 'inativo',
  preferencia: 'preferencia',
  triagem: 'triagem',
  senha: 'senha',
  data_validade_senha: 'data_validade_senha',
  indicacao_acidente: 'indicacao_acidente',
  recem_nascido: 'recem_nascido',
  classificacao: 'classificacao',
  ubspsf: 'ubspsf',
  acd: 'acd',
  atendimento_id_old: 'atendimento_id_old',
  medico_solicitante_id: 'medico_solicitante_id',
  matricula: 'matricula',
  guia_operadora: 'guia_operadora',
  is_external_invoice: 'is_external_invoice'
};

exports.Prisma.Assignment_code_unifiedScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  assignment_id: 'assignment_id',
  patient_id: 'patient_id',
  code: 'code',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.CaixaScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  data_hora: 'data_hora',
  total: 'total',
  quantidade_forma_pagamentos: 'quantidade_forma_pagamentos',
  nome_pagador: 'nome_pagador',
  cpf_pagador: 'cpf_pagador',
  inativo: 'inativo'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  assignment_id: 'assignment_id',
  price: 'price',
  observation: 'observation',
  status_invoice: 'status_invoice',
  payer_name: 'payer_name',
  payer_cpf: 'payer_cpf',
  finset_account_id: 'finset_account_id',
  is_enabled: 'is_enabled',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  nf_url: 'nf_url'
};

exports.Prisma.Invoice_assignment_productScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  invoice_id: 'invoice_id',
  assignment_product_id: 'assignment_product_id',
  assignment_id: 'assignment_id',
  price: 'price',
  quantity: 'quantity',
  discount: 'discount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Invoice_paymentScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  invoice_id: 'invoice_id',
  price_paid: 'price_paid',
  card_fee: 'card_fee',
  payment_method_id: 'payment_method_id',
  installments: 'installments',
  payment_date: 'payment_date',
  credit_date: 'credit_date',
  finset_id: 'finset_id',
  is_enabled: 'is_enabled',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Caixa_atendimento_produtoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  atendimento_produto_id: 'atendimento_produto_id',
  caixa_id: 'caixa_id'
};

exports.Prisma.Caixa_parcelaScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  data: 'data',
  caixa_id: 'caixa_id',
  valor: 'valor',
  parcelas: 'parcelas',
  tipo_pagamento: 'tipo_pagamento',
  banco_bandeira: 'banco_bandeira',
  observacao: 'observacao',
  acrescimo: 'acrescimo',
  data_credito: 'data_credito',
  data_cadastro: 'data_cadastro',
  codigo: 'codigo',
  inativo: 'inativo'
};

exports.Prisma.CidadesScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  estado_id: 'estado_id'
};

exports.Prisma.CoberturaScalarFieldEnum = {
  id: 'id',
  medico_id: 'medico_id',
  produto_id: 'produto_id',
  unidade_id: 'unidade_id'
};

exports.Prisma.ConveniosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  razao_social: 'razao_social',
  nome_fantasia: 'nome_fantasia',
  cnpj: 'cnpj',
  inativo: 'inativo',
  ans: 'ans',
  dias_retorno: 'dias_retorno',
  img: 'img',
  codigo_credenciamento: 'codigo_credenciamento',
  particular: 'particular',
  convenio_id_old: 'convenio_id_old',
  id_externo: 'id_externo',
  matricula: 'matricula',
  exigir_matricula: 'exigir_matricula',
  guia_principal: 'guia_principal',
  exigir_guia: 'exigir_guia',
  guia_operadora: 'guia_operadora',
  codigo_operadora: 'codigo_operadora',
  reembolso: 'reembolso',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  is_required_cpf: 'is_required_cpf',
  updated_at: 'updated_at',
  affiliate_id: 'affiliate_id',
  payment_days: 'payment_days',
  auto_increment: 'auto_increment'
};

exports.Prisma.CredenciamentosScalarFieldEnum = {
  id: 'id',
  convenio_id: 'convenio_id',
  medico_id: 'medico_id',
  plano_id: 'plano_id',
  unidade_id: 'unidade_id'
};

exports.Prisma.Dominio_produtoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  produto_id: 'produto_id',
  convenio_id: 'convenio_id',
  dominio_id: 'dominio_id',
  preco: 'preco',
  preco_custo: 'preco_custo',
  nome_externo: 'nome_externo',
  inativo: 'inativo'
};

exports.Prisma.EspecialidadesScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  inativo: 'inativo',
  tiss: 'tiss',
  especialidade_id_old: 'especialidade_id_old',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at'
};

exports.Prisma.Especialidades_medicosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  medico_id: 'medico_id',
  especialidade_id: 'especialidade_id'
};

exports.Prisma.EstadosScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  uf: 'uf',
  pais: 'pais'
};

exports.Prisma.EstoqueScalarFieldEnum = {
  id: 'id',
  produto_id: 'produto_id',
  documento: 'documento',
  no_pedido: 'no_pedido',
  lote: 'lote',
  data_validade: 'data_validade',
  data_estoque: 'data_estoque',
  valor: 'valor',
  quantidade: 'quantidade',
  saldo: 'saldo',
  movimento: 'movimento',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Estoque_pedidosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  descricao: 'descricao',
  status: 'status',
  produtos: 'produtos',
  created_at: 'created_at'
};

exports.Prisma.Formas_pagamentosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  descricao: 'descricao',
  bandeira: 'bandeira',
  imagem: 'imagem',
  taxa: 'taxa',
  dias_para_credito: 'dias_para_credito',
  inativo: 'inativo',
  tipo_operacao: 'tipo_operacao',
  created_at: 'created_at',
  updated_at: 'updated_at',
  finset_id: 'finset_id'
};

exports.Prisma.Formulario_preenchidoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  medico_id: 'medico_id',
  atendimento_id: 'atendimento_id',
  paciente_id: 'paciente_id',
  data_hora: 'data_hora',
  formulario_id: 'formulario_id',
  json_form: 'json_form',
  inativo: 'inativo',
  formulario_preenchido_id_old: 'formulario_preenchido_id_old'
};

exports.Prisma.Formulario_preenchido_oldScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  medico_id: 'medico_id',
  atendimento_id: 'atendimento_id',
  paciente_id: 'paciente_id',
  data_hora: 'data_hora',
  formulario_id: 'formulario_id',
  json_form: 'json_form',
  inativo: 'inativo',
  formulario_preenchido_id_old: 'formulario_preenchido_id_old'
};

exports.Prisma.FormulariosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  json: 'json',
  nome_impressao: 'nome_impressao',
  inativo: 'inativo',
  categoria: 'categoria',
  manter_preenchido: 'manter_preenchido',
  formulario_id_old: 'formulario_id_old'
};

exports.Prisma.FornecedoresScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  name: 'name',
  cnpj: 'cnpj',
  address: 'address',
  district: 'district',
  city: 'city',
  state: 'state',
  zip_code: 'zip_code',
  phone: 'phone',
  email: 'email',
  contact_name: 'contact_name',
  delivery_days: 'delivery_days',
  payment_conditions: 'payment_conditions',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.GuiagrupoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  tipo: 'tipo',
  inativo: 'inativo'
};

exports.Prisma.Guiagrupo_guiaprodutoScalarFieldEnum = {
  id: 'id',
  guiagrupo_id: 'guiagrupo_id',
  guiaproduto_id: 'guiaproduto_id',
  unidade_id: 'unidade_id'
};

exports.Prisma.GuiaprodutosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  tuss: 'tuss',
  tipo: 'tipo',
  inativo: 'inativo'
};

exports.Prisma.GuiasolicitacaoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  atendimento_id: 'atendimento_id',
  data_hora: 'data_hora'
};

exports.Prisma.Guiasolicitacao_guiaprodutosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  guiasolicitacao_id: 'guiasolicitacao_id',
  guiaproduto_id: 'guiaproduto_id',
  quantidade: 'quantidade'
};

exports.Prisma.Header_footerScalarFieldEnum = {
  id: 'id',
  header: 'header',
  footer: 'footer',
  foto: 'foto',
  unidade_id: 'unidade_id'
};

exports.Prisma.IntegracoesScalarFieldEnum = {
  id: 'id',
  tabela: 'tabela',
  chave_primaria: 'chave_primaria',
  data: 'data',
  integrado: 'integrado'
};

exports.Prisma.IntervalosScalarFieldEnum = {
  id: 'id',
  descricao: 'descricao',
  minutos: 'minutos'
};

exports.Prisma.LogScalarFieldEnum = {
  idlog: 'idlog',
  usuario_id: 'usuario_id',
  rota: 'rota',
  dados: 'dados',
  unidade_id: 'unidade_id',
  data_hora: 'data_hora'
};

exports.Prisma.LogerroteleconsultaScalarFieldEnum = {
  id: 'id',
  ocorrencia: 'ocorrencia',
  json_request: 'json_request'
};

exports.Prisma.LoteScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  data: 'data',
  status: 'status',
  convenio_id: 'convenio_id',
  lot: 'lot',
  protocol: 'protocol'
};

exports.Prisma.Lote_atendimentoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  atendimento_id: 'atendimento_id',
  lote_id: 'lote_id'
};

exports.Prisma.MedicamentosScalarFieldEnum = {
  id: 'id',
  descricao: 'descricao',
  medida_id: 'medida_id',
  via_id: 'via_id',
  intervalo_id: 'intervalo_id',
  unidade_id: 'unidade_id',
  inativo: 'inativo'
};

exports.Prisma.MedicosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  cpf: 'cpf',
  crm: 'crm',
  id_corporativo: 'id_corporativo',
  email: 'email',
  telefone: 'telefone',
  imposto_nf: 'imposto_nf',
  json_segunda: 'json_segunda',
  json_terca: 'json_terca',
  json_quarta: 'json_quarta',
  json_quinta: 'json_quinta',
  json_sexta: 'json_sexta',
  json_sabado: 'json_sabado',
  json_domingo: 'json_domingo',
  conselho: 'conselho',
  uf_conselho: 'uf_conselho',
  inativo: 'inativo',
  data_inicio_agenda: 'data_inicio_agenda',
  data_fim_agenda: 'data_fim_agenda',
  foto: 'foto',
  atendimento: 'atendimento',
  logo: 'logo',
  usu_id: 'usu_id',
  whatsapp: 'whatsapp',
  whatsapp_endereco: 'whatsapp_endereco',
  whatsapp_parabens: 'whatsapp_parabens',
  porcentagem: 'porcentagem',
  porcentagem_con: 'porcentagem_con',
  porcentagem_exa: 'porcentagem_exa',
  porcentagem_lab: 'porcentagem_lab',
  mensagem_parabens: 'mensagem_parabens',
  id_externo: 'id_externo',
  features: 'features',
  numero_rqe: 'numero_rqe',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  is_requesting_physician: 'is_requesting_physician',
  updated_at: 'updated_at',
  permissions: 'permissions',
  whatsapp_con: 'whatsapp_con',
  whatsapp_exa: 'whatsapp_exa'
};

exports.Prisma.Doctor_message_shippedScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  doctor_id: 'doctor_id',
  schedule_patient_id: 'schedule_patient_id',
  from: 'from',
  to: 'to',
  message: 'message',
  created_at: 'created_at'
};

exports.Prisma.Doctor_paymentScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  doctor_id: 'doctor_id',
  value: 'value',
  protocol: 'protocol',
  status: 'status',
  file_id: 'file_id',
  observation: 'observation',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Doctor_payment_productsScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  doctor_payment_id: 'doctor_payment_id',
  assignment_product_id: 'assignment_product_id',
  rule_id: 'rule_id',
  tax: 'tax',
  payment_value: 'payment_value',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.FilesScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  file_name: 'file_name',
  file_size: 'file_size',
  mimetype: 'mimetype',
  file_url: 'file_url',
  description: 'description',
  is_public: 'is_public',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Medicos_formulariosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  medico_id: 'medico_id',
  formulario_id: 'formulario_id',
  index: 'index'
};

exports.Prisma.MedidasScalarFieldEnum = {
  id: 'id',
  descricao: 'descricao'
};

exports.Prisma.MensagensScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  paciente_id: 'paciente_id',
  telefone: 'telefone',
  agenda_paciente_id: 'agenda_paciente_id',
  resposta: 'resposta'
};

exports.Prisma.Ocorrencia_atendimento_produtoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  atendimento_id: 'atendimento_id',
  status: 'status',
  data_hora: 'data_hora',
  produto_id: 'produto_id',
  tipo: 'tipo'
};

exports.Prisma.OcorrenciasScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  data_hora: 'data_hora',
  status: 'status',
  motivo: 'motivo',
  agenda_id: 'agenda_id',
  paciente_id: 'paciente_id'
};

exports.Prisma.OrcamentoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  paciente_id: 'paciente_id',
  data_hora: 'data_hora'
};

exports.Prisma.Orcamento_produtoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  produto_id: 'produto_id',
  orcamento_id: 'orcamento_id',
  desconto: 'desconto',
  quantidade: 'quantidade',
  preco: 'preco'
};

exports.Prisma.Paciente_anexoScalarFieldEnum = {
  id: 'id',
  paciente_id: 'paciente_id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  path: 'path',
  data_hora: 'data_hora'
};

exports.Prisma.Paciente_unidadeScalarFieldEnum = {
  id: 'id',
  paciente_id: 'paciente_id',
  unidade_id: 'unidade_id'
};

exports.Prisma.PacientesScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  nascimento: 'nascimento',
  genero: 'genero',
  user_id: 'user_id',
  email: 'email',
  telefone: 'telefone',
  telefone2: 'telefone2',
  cpf: 'cpf',
  numero: 'numero',
  logradouro: 'logradouro',
  bairro: 'bairro',
  cidade: 'cidade',
  estado: 'estado',
  cep: 'cep',
  complemento: 'complemento',
  numero_carteira: 'numero_carteira',
  validade_carteira: 'validade_carteira',
  nome_mae: 'nome_mae',
  rg: 'rg',
  orgao_emissor: 'orgao_emissor',
  estado_civil: 'estado_civil',
  foto: 'foto',
  convenio_id: 'convenio_id',
  plano_id: 'plano_id',
  inativo: 'inativo',
  alergia: 'alergia',
  cartao_nacional_saude: 'cartao_nacional_saude',
  codigo_externo: 'codigo_externo',
  paciente_id_old: 'paciente_id_old',
  id_externo: 'id_externo',
  tipo_usuario: 'tipo_usuario',
  obs_tipo: 'obs_tipo',
  profissao: 'profissao',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at',
  height: 'height',
  update_hash_code: 'update_hash_code',
  weight: 'weight'
};

exports.Prisma.PainelScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  token: 'token',
  created_at: 'created_at',
  updated_at: 'updated_at',
  video_url: 'video_url'
};

exports.Prisma.PaisesScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  sigla: 'sigla'
};

exports.Prisma.Pesquisa_respostaScalarFieldEnum = {
  id: 'id',
  comentario: 'comentario',
  pesquisa_id: 'pesquisa_id',
  data_hora: 'data_hora'
};

exports.Prisma.PesquisasScalarFieldEnum = {
  id: 'id',
  nota: 'nota',
  agenda_id: 'agenda_id',
  comentario: 'comentario',
  data_hora: 'data_hora'
};

exports.Prisma.PlanosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  convenio_id: 'convenio_id',
  plano_id_old: 'plano_id_old',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at'
};

exports.Prisma.ProdutosScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  descricao: 'descricao',
  inativo: 'inativo',
  cbhpm: 'cbhpm',
  tuss: 'tuss',
  tipo: 'tipo',
  amb: 'amb',
  produto_id_old: 'produto_id_old',
  ncm: 'ncm',
  fornecedor_id: 'fornecedor_id',
  apresentacao: 'apresentacao',
  unidades_compra: 'unidades_compra',
  unidades_aplicacao: 'unidades_aplicacao',
  estoque_min: 'estoque_min',
  reposicao_dias: 'reposicao_dias',
  estoque_reposicao: 'estoque_reposicao',
  medida_id: 'medida_id',
  via_id: 'via_id',
  intervalo_id: 'intervalo_id',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at',
  product_class_id: 'product_class_id'
};

exports.Prisma.Product_classScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Produtos_produtosgrupoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  produto_id: 'produto_id',
  produtosgrupo_id: 'produtosgrupo_id'
};

exports.Prisma.ProdutosgrupoScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  inativo: 'inativo'
};

exports.Prisma.SalasScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome: 'nome',
  painel_id: 'painel_id'
};

exports.Prisma.Tabela_dominioScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  nome: 'nome'
};

exports.Prisma.UnidadesScalarFieldEnum = {
  id: 'id',
  fantasia: 'fantasia',
  razao_social: 'razao_social',
  cnpj: 'cnpj',
  cin: 'cin',
  cnes: 'cnes',
  endereco: 'endereco',
  fone: 'fone',
  email: 'email',
  clinica_individual: 'clinica_individual',
  profissional_resp_nome: 'profissional_resp_nome',
  profissional_resp_cpf: 'profissional_resp_cpf',
  profissional_resp_fone: 'profissional_resp_fone',
  profissional_resp_email: 'profissional_resp_email',
  profissional_resp_crm: 'profissional_resp_crm',
  profissional_resp_conselho: 'profissional_resp_conselho',
  profissional_resp_uf_conselho: 'profissional_resp_uf_conselho',
  logo: 'logo',
  estado: 'estado',
  cidade: 'cidade',
  relatorio: 'relatorio',
  bairro: 'bairro',
  numero: 'numero',
  complemento: 'complemento',
  cep: 'cep',
  urgencia: 'urgencia',
  percentual_cartao: 'percentual_cartao',
  financeiro: 'financeiro',
  id_externo: 'id_externo',
  datafin_password: 'datafin_password',
  assumir_taxa_cartao: 'assumir_taxa_cartao',
  permissions: 'permissions'
};

exports.Prisma.AffiliatesScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  fantasy_name: 'fantasy_name',
  corporate_name: 'corporate_name',
  cpf_cnpj: 'cpf_cnpj',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  type_document: 'type_document',
  cnes: 'cnes'
};

exports.Prisma.CidScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cod: 'cod',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.User_adminScalarFieldEnum = {
  usu_id: 'usu_id',
  unidade_id: 'unidade_id',
  usu_nome: 'usu_nome',
  usu_email: 'usu_email',
  usu_senha: 'usu_senha',
  usu_cpf: 'usu_cpf',
  usu_profissao: 'usu_profissao',
  usu_acesso: 'usu_acesso',
  usu_app: 'usu_app',
  inativo: 'inativo',
  privacy_policy_accepted_at: 'privacy_policy_accepted_at',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by',
  updated_at: 'updated_at'
};

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  email: 'email',
  senha: 'senha',
  facebook_id: 'facebook_id',
  firebase_id: 'firebase_id',
  paciente_id: 'paciente_id'
};

exports.Prisma.ViasScalarFieldEnum = {
  id: 'id',
  descricao: 'descricao'
};

exports.Prisma.Product_kitScalarFieldEnum = {
  id: 'id',
  clinic_id: 'clinic_id',
  main_product_id: 'main_product_id',
  product_id: 'product_id',
  quantity: 'quantity',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  deleted_by: 'deleted_by'
};

exports.Prisma.Medico_regrasScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  regra_id: 'regra_id',
  medico_id: 'medico_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NotificacoesScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  usuario_id_destinatario: 'usuario_id_destinatario',
  usuario_id_remetente: 'usuario_id_remetente',
  tipo: 'tipo',
  titulo: 'titulo',
  mensagem: 'mensagem',
  status: 'status',
  lote_repasse_id: 'lote_repasse_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RegrasScalarFieldEnum = {
  id: 'id',
  unidade_id: 'unidade_id',
  nome_regra: 'nome_regra',
  tipo_regra: 'tipo_regra',
  convenios_id: 'convenios_id',
  produtos_id: 'produtos_id',
  tipo_convenio: 'tipo_convenio',
  tipo_produto: 'tipo_produto',
  porcentagem: 'porcentagem',
  data_vigencia: 'data_vigencia',
  data_encerramento: 'data_encerramento',
  inativo: 'inativo',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.agendas_tipo = exports.$Enums.agendas_tipo = {
  AMBULATORIAL: 'AMBULATORIAL',
  CIRURGICA: 'CIRURGICA',
  URGENCIA: 'URGENCIA',
  ATENDIMENTO: 'ATENDIMENTO'
};

exports.atendimento_produto_status_caixa = exports.$Enums.atendimento_produto_status_caixa = {
  PENDENTE: 'PENDENTE',
  EM_ANALISE: 'EM_ANALISE',
  FATURADO: 'FATURADO',
  GLOSADO: 'GLOSADO',
  ACATADO: 'ACATADO',
  CORTESIA: 'CORTESIA',
  NAO_FATURAR: 'NAO_FATURAR',
  QUITADO: 'QUITADO'
};

exports.status_invoice = exports.$Enums.status_invoice = {
  TO_PAY: 'TO_PAY',
  PAYED: 'PAYED',
  CANCELED: 'CANCELED'
};

exports.estoque_movimento = exports.$Enums.estoque_movimento = {
  ENTRADA: 'ENTRADA',
  SAIDA: 'SAIDA'
};

exports.estoque_pedido_status = exports.$Enums.estoque_pedido_status = {
  PENDENTE: 'PENDENTE',
  PARCIAL: 'PARCIAL',
  ATENDIDO: 'ATENDIDO'
};

exports.formas_pagamentos_tipo_operacao = exports.$Enums.formas_pagamentos_tipo_operacao = {
  AVISTA: 'AVISTA',
  DEBITO: 'DEBITO',
  CREDITO: 'CREDITO'
};

exports.medicos_whatsapp_con = exports.$Enums.medicos_whatsapp_con = {
  NONE: 'NONE',
  APPOINTMENT: 'APPOINTMENT',
  ORDER_ARRIVAL: 'ORDER_ARRIVAL',
  ORDER_ARRIVAL_TURN: 'ORDER_ARRIVAL_TURN'
};

exports.medicos_whatsapp_exa = exports.$Enums.medicos_whatsapp_exa = {
  NONE: 'NONE',
  APPOINTMENT: 'APPOINTMENT',
  ORDER_ARRIVAL: 'ORDER_ARRIVAL',
  ORDER_ARRIVAL_TURN: 'ORDER_ARRIVAL_TURN'
};

exports.doctor_payment_status = exports.$Enums.doctor_payment_status = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PAID: 'PAID'
};

exports.tipo_ocorrencia_produto = exports.$Enums.tipo_ocorrencia_produto = {
  ENFERMAGEM: 'ENFERMAGEM',
  MEDICINA: 'MEDICINA'
};

exports.pacientes_tipo_usuario = exports.$Enums.pacientes_tipo_usuario = {
  NONE: 'NONE',
  VIP: 'VIP',
  INDESEJADO: 'INDESEJADO'
};

exports.tipo_produtos = exports.$Enums.tipo_produtos = {
  CON: 'CON',
  DIA: 'DIA',
  EXA: 'EXA',
  HON: 'HON',
  LAB: 'LAB',
  MAT: 'MAT',
  MED: 'MED',
  TAX: 'TAX'
};

exports.unidades_assumir_taxa_cartao = exports.$Enums.unidades_assumir_taxa_cartao = {
  S: 'S',
  N: 'N'
};

exports.type_document_affiliates = exports.$Enums.type_document_affiliates = {
  CPF: 'CPF',
  CNPJ: 'CNPJ'
};

exports.notificacoes_tipo = exports.$Enums.notificacoes_tipo = {
  MENSAGEM: 'MENSAGEM',
  REPASSE: 'REPASSE'
};

exports.notificacoes_status = exports.$Enums.notificacoes_status = {
  ENVIADO: 'ENVIADO',
  VISUALIZADO: 'VISUALIZADO',
  CONFIRMADO: 'CONFIRMADO'
};

exports.regras_tipo_regra = exports.$Enums.regras_tipo_regra = {
  CONVENIO: 'CONVENIO',
  PRODUTO: 'PRODUTO',
  TIPO_CONVENIO: 'TIPO_CONVENIO',
  TIPO_PRODUTO: 'TIPO_PRODUTO'
};

exports.regras_tipo_convenio = exports.$Enums.regras_tipo_convenio = {
  PARTICULAR: 'PARTICULAR',
  CONVENIO: 'CONVENIO'
};

exports.Prisma.ModelName = {
  agenda_produto: 'agenda_produto',
  agendas: 'agendas',
  agendas_pacientes: 'agendas_pacientes',
  anexo_formulario: 'anexo_formulario',
  atendcontinuado: 'atendcontinuado',
  atendcontinuado_atendimento_produto: 'atendcontinuado_atendimento_produto',
  atendimento_produto: 'atendimento_produto',
  assignment_product_history: 'assignment_product_history',
  atendimentos: 'atendimentos',
  assignment_code_unified: 'assignment_code_unified',
  caixa: 'caixa',
  invoice: 'invoice',
  invoice_assignment_product: 'invoice_assignment_product',
  invoice_payment: 'invoice_payment',
  caixa_atendimento_produto: 'caixa_atendimento_produto',
  caixa_parcela: 'caixa_parcela',
  cidades: 'cidades',
  cobertura: 'cobertura',
  convenios: 'convenios',
  credenciamentos: 'credenciamentos',
  dominio_produto: 'dominio_produto',
  especialidades: 'especialidades',
  especialidades_medicos: 'especialidades_medicos',
  estados: 'estados',
  estoque: 'estoque',
  estoque_pedidos: 'estoque_pedidos',
  formas_pagamentos: 'formas_pagamentos',
  formulario_preenchido: 'formulario_preenchido',
  formulario_preenchido_old: 'formulario_preenchido_old',
  formularios: 'formularios',
  fornecedores: 'fornecedores',
  guiagrupo: 'guiagrupo',
  guiagrupo_guiaproduto: 'guiagrupo_guiaproduto',
  guiaprodutos: 'guiaprodutos',
  guiasolicitacao: 'guiasolicitacao',
  guiasolicitacao_guiaprodutos: 'guiasolicitacao_guiaprodutos',
  header_footer: 'header_footer',
  integracoes: 'integracoes',
  intervalos: 'intervalos',
  log: 'log',
  logerroteleconsulta: 'logerroteleconsulta',
  lote: 'lote',
  lote_atendimento: 'lote_atendimento',
  medicamentos: 'medicamentos',
  medicos: 'medicos',
  doctor_message_shipped: 'doctor_message_shipped',
  doctor_payment: 'doctor_payment',
  doctor_payment_products: 'doctor_payment_products',
  files: 'files',
  medicos_formularios: 'medicos_formularios',
  medidas: 'medidas',
  mensagens: 'mensagens',
  ocorrencia_atendimento_produto: 'ocorrencia_atendimento_produto',
  ocorrencias: 'ocorrencias',
  orcamento: 'orcamento',
  orcamento_produto: 'orcamento_produto',
  paciente_anexo: 'paciente_anexo',
  paciente_unidade: 'paciente_unidade',
  pacientes: 'pacientes',
  painel: 'painel',
  paises: 'paises',
  pesquisa_resposta: 'pesquisa_resposta',
  pesquisas: 'pesquisas',
  planos: 'planos',
  produtos: 'produtos',
  product_class: 'product_class',
  produtos_produtosgrupo: 'produtos_produtosgrupo',
  produtosgrupo: 'produtosgrupo',
  salas: 'salas',
  tabela_dominio: 'tabela_dominio',
  unidades: 'unidades',
  affiliates: 'affiliates',
  cid: 'cid',
  user_admin: 'user_admin',
  usuario: 'usuario',
  vias: 'vias',
  product_kit: 'product_kit',
  medico_regras: 'medico_regras',
  notificacoes: 'notificacoes',
  regras: 'regras'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
